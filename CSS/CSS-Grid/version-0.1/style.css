:root {
  --blue: #007bff;
  --indigo: #6610f2;
  --purple: #6f42c1;
  --pink: #e83e8c;
  --red: #dc3545;
  --orange: #fd7e14;
  --yellow: #ffc107;
  --green: #28a745;
  --teal: #20c997;
  --cyan: #17a2b8;
  --white: #fff;
  --gray: #868e96;
  --gray-dark: #343a40;
  --primary: #007bff;
  --secondary: #868e96;
  --success: #28a745;
  --info: #17a2b8;
  --warning: #ffc107;
  --danger: #dc3545;
  --light: #f8f9fa;
  --dark: #343a40;
  --breakpoint-xs: 0;
  --breakpoint-sm: 576px;
  --breakpoint-md: 768px;
  --breakpoint-lg: 992px;
  --breakpoint-xl: 1200px;
  --font-family-sans-serif: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  --font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
}


html{
	margin: 0;
	padding: 0;
	height: 100%;
}


/*=============================*/
/*NOTE: Here is the trick to fit 
the content to full screen*/
body {
	margin: 0;
/*	when we set body height to 100% it overflows the html
if a border is set*/
	height: 98%;  /* <-- VERY IMOPRTANT HACK!!!! */
}
/*=============================*/

h1 {
	text-align: center;
	
}

.container {
	height: 100%;
	display: grid;
	padding: .3rem;
	/*	fr unit allows you to set the size of a track
	as a fraction of the free space of the grid container.*/
	grid-template-columns: repeat(4, 1fr);
	/*auto value will fill the spaces by specified with template
	area*/ 
	grid-template-rows: auto;
	/*We can also specify the template area by giving names. 
	This will also give visual template in syntax*/
	grid-template-areas: "header header header header"
				" sidebar . main main"
				"footer footer . footer-2";
	/*	NOTE: after you finish designing get
	rid of the border. After remove the border
	the design will fit to the screen.*/
	border: 2px solid red;	
}

.container > .item {
	border: 1px solid blue;
	border-radius: .3rem;
	margin: .3rem;
	text-align: center;
	color: white;
}

/*==============================*/
/* ALIGN-SELF */

/*Here the aligh-self property is explained by examples.
It align the item inside the grid cell vertically.
Values it can get are:
- start
- end
- center
- stretch
*/

.item-1 {
	background: var(--indigo);
	width: 90%;
	grid-area: header;
	justify-self: center;
	align-self: center;  /*<-- Here is align with justify*/
}

.item-2 {
	background: var(--blue);
	grid-area: sidebar;
	/*it will take the width of the grid cell and 
	proportionally set its width*/
	width: 50%;
/*	this property will set the horizontal position
	of the item in the grid.*/
	justify-self: start;
	align-self: end;
}

.item-3 {
	background: var(--purple);
	grid-area: main;
	width: 80%;
	justify-self: end;
	align-self: start;
}

.item-4 {
	background: var(--pink);
	/*We can specify coordinates in such a way:
	grid-row-start + grid-column-start
	+ grid-row-end + grid-column-end*/
	grid-area: 3 / 2 / 4 / 5;
	/*width: 60%;*/
	justify-self: stretch;
	height: 80%;
	align-self: stretch;
}

/*.item-5 {
	background: var(--orange);
	grid-area: footer-2;
}

.item-6 {
	background: var(--red);
}

.item-7 {
	background: var(--teal);
}	

.item-8 {
	background: var(--info);
}

.item-9 {
	background: var(--gray);
}

.item-10 {
	background: var(--danger);
}

.item-11 {
	background: var(--dark);
}

.item-12 {
	background: var(--cyan);

}*/